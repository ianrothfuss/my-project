"use strict";exports.id=2582,exports.ids=[2582],exports.modules={92582:(a,b,c)=>{c.d(b,{EventStreamSerde:()=>e});var d=c(69480);class e{marshaller;serializer;deserializer;serdeContext;defaultContentType;constructor({marshaller:a,serializer:b,deserializer:c,serdeContext:d,defaultContentType:e}){this.marshaller=a,this.serializer=b,this.deserializer=c,this.serdeContext=d,this.defaultContentType=e}async serializeEventStream({eventStream:a,requestSchema:b,initialRequest:c}){let d=this.marshaller,e=b.getEventStreamMember(),f=b.getMemberSchema(e),g=this.serializer,h=this.defaultContentType,i=Symbol("initialRequestMarker"),j={async *[Symbol.asyncIterator](){if(c){g.write(b,c);let a=g.flush();yield{[i]:!0,headers:{":event-type":{type:"string",value:"initial-request"},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:h}},body:a}}for await(let b of a)yield b}};return d.serialize(j,a=>{if(a[i])return{headers:a.headers,body:a.body};let b=Object.keys(a).find(a=>"__type"!==a)??"",{additionalHeaders:c,body:d,eventType:e,explicitPayloadContentType:g}=this.writeEventBody(b,f,a);return{headers:{":event-type":{type:"string",value:e},":message-type":{type:"string",value:"event"},":content-type":{type:"string",value:g??h},...c},body:d}})}async deserializeEventStream({response:a,responseSchema:b,initialResponseContainer:c}){let d=this.marshaller,e=b.getEventStreamMember(),f=b.getMemberSchema(e).getMemberSchemas(),g=Symbol("initialResponseMarker"),h=d.deserialize(a.body,async a=>{let c=Object.keys(a).find(a=>"__type"!==a)??"";if("initial-response"===c){let d=await this.deserializer.read(b,a[c].body);return delete d[e],{[g]:!0,...d}}if(!(c in f))return{$unknown:a};{let b=f[c];return{[c]:await this.deserializer.read(b,a[c].body)}}}),i=h[Symbol.asyncIterator](),j=await i.next();if(j.done)return h;if(j.value?.[g]){if(!b)throw Error("@smithy::core/protocols - initial-response event encountered in event stream but no response schema given.");for(let[a,b]of Object.entries(j.value))c[a]=b}return{async *[Symbol.asyncIterator](){for(j?.value?.[g]||(yield j.value);;){let{done:a,value:b}=await i.next();if(a)break;yield b}}}}writeEventBody(a,b,c){let e,f=this.serializer,g=a,h=null,i=b.getSchema()[4].includes(a),j={};if(i){let d=b.getMemberSchema(a);if(d.isStructSchema()){for(let[b,e]of d.structIterator()){let{eventHeader:d,eventPayload:f}=e.getMergedTraits();if(f){h=b;break}if(d){let d=c[a][b],f="binary";e.isNumericSchema()?f=-0x80000000<=d&&d<=0x80000000-1?"integer":"long":e.isTimestampSchema()?f="timestamp":e.isStringSchema()?f="string":e.isBooleanSchema()&&(f="boolean"),null!=d&&(j[b]={type:f,value:d},delete c[a][b])}}if(null!==h){let b=d.getMemberSchema(h);b.isBlobSchema()?e="application/octet-stream":b.isStringSchema()&&(e="text/plain"),f.write(b,c[a][h])}else f.write(d,c[a])}else throw Error("@smithy/core/event-streams - non-struct member not supported in event stream union.")}else{let[b,d]=c[a];g=b,f.write(15,d)}let k=f.flush();return{body:"string"==typeof k?(this.serdeContext?.utf8Decoder??d.a)(k):k,eventType:g,explicitPayloadContentType:e,additionalHeaders:j}}}}};