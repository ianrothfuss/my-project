"use strict";exports.id=3437,exports.ids=[3437],exports.modules={33437:(a,b,c)=>{c.r(b),c.d(b,{fromTokenFile:()=>j,fromWebToken:()=>h});var d=c(26146),e=c(16111),f=c(31101),g=c(29021);let h=a=>async b=>{a.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");let{roleArn:d,roleSessionName:e,webIdentityToken:f,providerId:g,policyArns:h,policy:i,durationSeconds:j}=a,{roleAssumerWithWebIdentity:k}=a;if(!k){let{getDefaultRoleAssumerWithWebIdentity:d}=await Promise.all([c.e(3035),c.e(1042)]).then(c.bind(c,51042));k=d({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...b?.callerClientConfig,...a.parentClientConfig}},a.clientPlugins)}return k({RoleArn:d,RoleSessionName:e??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:f,ProviderId:g,PolicyArns:h,Policy:i,DurationSeconds:j})},i="AWS_WEB_IDENTITY_TOKEN_FILE",j=(a={})=>async()=>{a.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");let b=a?.webIdentityTokenFile??process.env[i],c=a?.roleArn??process.env.AWS_ROLE_ARN,j=a?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!b||!c)throw new e.C("Web identity configuration not specified",{logger:a.logger});let k=await h({...a,webIdentityToken:f.Z?.getTokenRecord?.()[b]??(0,g.readFileSync)(b,{encoding:"ascii"}),roleArn:c,roleSessionName:j})();return b===process.env[i]&&(0,d.g)(k,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),k}}};