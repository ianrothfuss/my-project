"use strict";exports.id=9895,exports.ids=[9895],exports.modules={99895:(a,b,c)=>{c.d(b,{fromSSO:()=>t});var d=c(16111),e=c(36137),f=c(89010),g=c(71374),h=c(26146),i=c(46550),j=c(27809);let k="To refresh this SSO session run 'aws sso login' with the corresponding profile.",l=async(a,b={})=>{let{SSOOIDCClient:d}=await Promise.all([c.e(3035),c.e(8496)]).then(c.bind(c,88496));return new d(Object.assign({},b.clientConfig??{},{region:a??b.clientConfig?.region,logger:b.clientConfig?.logger??b.parentClientConfig?.logger}))},m=async(a,b,d={})=>{let{CreateTokenCommand:e}=await Promise.all([c.e(3035),c.e(8496)]).then(c.bind(c,88496));return(await l(b,d)).send(new e({clientId:a.clientId,clientSecret:a.clientSecret,refreshToken:a.refreshToken,grantType:"refresh_token"}))},n=a=>{if(a.expiration&&a.expiration.getTime()<Date.now())throw new i.J(`Token is expired. ${k}`,!1)},o=(a,b,c=!1)=>{if(void 0===b)throw new i.J(`Value not present for '${a}' in SSO Token${c?". Cannot refresh":""}. ${k}`,!1)};var p=c(62261);let{writeFile:q}=c(29021).promises,r=new Date(0),s=async({ssoStartUrl:a,ssoSession:b,ssoAccountId:l,ssoRegion:s,ssoRoleName:t,ssoClient:u,clientConfig:v,parentClientConfig:w,profile:x,filepath:y,configFilepath:z,ignoreCache:A,logger:B})=>{let C,D,E="To refresh this SSO session run aws sso login with the corresponding profile.";if(b)try{let a=await ((a={})=>async({callerClientConfig:b}={})=>{let c,d={...a,parentClientConfig:{...b,...a.parentClientConfig}};d.logger?.debug("@aws-sdk/token-providers - fromSso");let h=await (0,f.Y)(d),l=(0,e.Bz)({profile:d.profile??b?.profile}),s=h[l];if(s){if(!s.sso_session)throw new i.J(`Profile '${l}' is missing required property 'sso_session'.`)}else throw new i.J(`Profile '${l}' could not be found in shared credentials file.`,!1);let t=s.sso_session,u=(await (0,g.q)(d))[t];if(!u)throw new i.J(`Sso session '${t}' could not be found in shared credentials file.`,!1);for(let a of["sso_start_url","sso_region"])if(!u[a])throw new i.J(`Sso session '${t}' is missing required property '${a}'.`,!1);u.sso_start_url;let v=u.sso_region;try{c=await (0,j.v)(t)}catch(a){throw new i.J(`The SSO session token associated with profile=${l} was not found or is invalid. ${k}`,!1)}o("accessToken",c.accessToken),o("expiresAt",c.expiresAt);let{accessToken:w,expiresAt:x}=c,y={token:w,expiration:new Date(x)};if(y.expiration.getTime()-Date.now()>3e5)return y;if(Date.now()-r.getTime()<3e4)return n(y),y;o("clientId",c.clientId,!0),o("clientSecret",c.clientSecret,!0),o("refreshToken",c.refreshToken,!0);try{r.setTime(Date.now());let a=await m(c,v,d);o("accessToken",a.accessToken),o("expiresIn",a.expiresIn);let b=new Date(Date.now()+1e3*a.expiresIn);try{await ((a,b)=>{let c=(0,p.C)(a);return q(c,JSON.stringify(b,null,2))})(t,{...c,accessToken:a.accessToken,expiresAt:b.toISOString(),refreshToken:a.refreshToken})}catch(a){}return{token:a.accessToken,expiration:b}}catch(a){return n(y),y}})({profile:x,filepath:y,configFilepath:z,ignoreCache:A})();C={accessToken:a.token,expiresAt:new Date(a.expiration).toISOString()}}catch(a){throw new d.C(a.message,{tryNextLink:!1,logger:B})}else try{C=await (0,j.v)(a)}catch(a){throw new d.C(`The SSO session associated with this profile is invalid. ${E}`,{tryNextLink:!1,logger:B})}if(new Date(C.expiresAt).getTime()-Date.now()<=0)throw new d.C(`The SSO session associated with this profile has expired. ${E}`,{tryNextLink:!1,logger:B});let{accessToken:F}=C,{SSOClient:G,GetRoleCredentialsCommand:H}=await Promise.all([c.e(3035),c.e(3449)]).then(c.bind(c,33449)),I=u||new G(Object.assign({},v??{},{logger:v?.logger??w?.logger,region:v?.region??s}));try{D=await I.send(new H({accountId:l,roleName:t,accessToken:F}))}catch(a){throw new d.C(a,{tryNextLink:!1,logger:B})}let{roleCredentials:{accessKeyId:J,secretAccessKey:K,sessionToken:L,expiration:M,credentialScope:N,accountId:O}={}}=D;if(!J||!K||!L||!M)throw new d.C("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:B});let P={accessKeyId:J,secretAccessKey:K,sessionToken:L,expiration:new Date(M),...N&&{credentialScope:N},...O&&{accountId:O}};return b?(0,h.g)(P,"CREDENTIALS_SSO","s"):(0,h.g)(P,"CREDENTIALS_SSO_LEGACY","u"),P},t=(a={})=>async({callerClientConfig:b}={})=>{a.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:c,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoSession:k}=a,{ssoClient:l}=a,m=(0,e.Bz)({profile:a.profile??b?.profile});if(c||h||i||j||k)if(c&&h&&i&&j)return s({ssoStartUrl:c,ssoSession:k,ssoAccountId:h,ssoRegion:i,ssoRoleName:j,ssoClient:l,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:m,filepath:a.filepath,configFilepath:a.configFilepath,ignoreCache:a.ignoreCache,logger:a.logger});else throw new d.C('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:a.logger});{let b=(await (0,f.Y)(a))[m];if(!b)throw new d.C(`Profile ${m} was not found.`,{logger:a.logger});if(!(a=>a&&("string"==typeof a.sso_start_url||"string"==typeof a.sso_account_id||"string"==typeof a.sso_session||"string"==typeof a.sso_region||"string"==typeof a.sso_role_name))(b))throw new d.C(`Profile ${m} is not configured with SSO credentials.`,{logger:a.logger});if(b?.sso_session){let e=(await (0,g.q)(a))[b.sso_session],f=` configurations in profile ${m} and sso-session ${b.sso_session}`;if(i&&i!==e.sso_region)throw new d.C("Conflicting SSO region"+f,{tryNextLink:!1,logger:a.logger});if(c&&c!==e.sso_start_url)throw new d.C("Conflicting SSO start_url"+f,{tryNextLink:!1,logger:a.logger});b.sso_region=e.sso_region,b.sso_start_url=e.sso_start_url}let{sso_start_url:e,sso_account_id:h,sso_region:j,sso_role_name:k,sso_session:n}=((a,b)=>{let{sso_start_url:c,sso_account_id:e,sso_region:f,sso_role_name:g}=a;if(!c||!e||!f||!g)throw new d.C(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(a).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:b});return a})(b,a.logger);return s({ssoStartUrl:e,ssoSession:n,ssoAccountId:h,ssoRegion:j,ssoRoleName:k,ssoClient:l,clientConfig:a.clientConfig,parentClientConfig:a.parentClientConfig,profile:m,filepath:a.filepath,configFilepath:a.configFilepath,ignoreCache:a.ignoreCache,logger:a.logger})}}}};