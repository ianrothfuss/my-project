/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-sqlite'
import {
  sqliteTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  text,
  numeric,
} from '@payloadcms/db-sqlite/drizzle/sqlite-core'
import { sql, relations } from '@payloadcms/db-sqlite/drizzle'

export const users_roles = sqliteTable(
  'users_roles',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: text('value', { enum: ['admin', 'customer'] }),
    id: integer('id').primaryKey(),
  },
  (columns) => [
    index('users_roles_order_idx').on(columns.order),
    index('users_roles_parent_idx').on(columns.parent),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_roles_parent_fk',
    }).onDelete('cascade'),
  ],
)

export const users_sessions = sqliteTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    expiresAt: text('expires_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('users_sessions_order_idx').on(columns._order),
    index('users_sessions_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    email: text('email').notNull(),
    resetPasswordToken: text('reset_password_token'),
    resetPasswordExpiration: text('reset_password_expiration').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    salt: text('salt'),
    hash: text('hash'),
    loginAttempts: numeric('login_attempts', { mode: 'number' }).default('0'),
    lockUntil: text('lock_until').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('users_updated_at_idx').on(columns.updatedAt),
    index('users_created_at_idx').on(columns.createdAt),
    uniqueIndex('users_email_idx').on(columns.email),
  ],
)

export const pages_hero_links = sqliteTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
  },
  (columns) => [
    index('pages_hero_links_order_idx').on(columns._order),
    index('pages_hero_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_cta_links = sqliteTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: text('_parent_id').notNull(),
    id: text('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
  },
  (columns) => [
    index('pages_blocks_cta_links_order_idx').on(columns._order),
    index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_cta = sqliteTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    richText: text('rich_text', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_cta_order_idx').on(columns._order),
    index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    index('pages_blocks_cta_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_content_columns = sqliteTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: text('_parent_id').notNull(),
    id: text('id').primaryKey(),
    size: text('size', { enum: ['oneThird', 'half', 'twoThirds', 'full'] }).default('oneThird'),
    richText: text('rich_text', { mode: 'json' }),
    enableLink: integer('enable_link', { mode: 'boolean' }),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
  },
  (columns) => [
    index('pages_blocks_content_columns_order_idx').on(columns._order),
    index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_content = sqliteTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_content_order_idx').on(columns._order),
    index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    index('pages_blocks_content_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_media_block = sqliteTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_media_block_order_idx').on(columns._order),
    index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    index('pages_blocks_media_block_path_idx').on(columns._path),
    index('pages_blocks_media_block_media_idx').on(columns.media),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_archive = sqliteTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    introContent: text('intro_content', { mode: 'json' }),
    populateBy: text('populate_by', { enum: ['collection', 'selection'] }).default('collection'),
    relationTo: text('relation_to', { enum: ['products'] }).default('products'),
    limit: numeric('limit', { mode: 'number' }).default('10'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_archive_order_idx').on(columns._order),
    index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    index('pages_blocks_archive_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_carousel = sqliteTable(
  'pages_blocks_carousel',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    populateBy: text('populate_by', { enum: ['collection', 'selection'] }).default('collection'),
    relationTo: text('relation_to', { enum: ['products'] }).default('products'),
    limit: numeric('limit', { mode: 'number' }).default('10'),
    populatedDocsTotal: numeric('populated_docs_total', { mode: 'number' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_carousel_order_idx').on(columns._order),
    index('pages_blocks_carousel_parent_id_idx').on(columns._parentID),
    index('pages_blocks_carousel_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_carousel_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_three_item_grid = sqliteTable(
  'pages_blocks_three_item_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_three_item_grid_order_idx').on(columns._order),
    index('pages_blocks_three_item_grid_parent_id_idx').on(columns._parentID),
    index('pages_blocks_three_item_grid_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_three_item_grid_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_banner = sqliteTable(
  'pages_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    style: text('style', { enum: ['info', 'warning', 'error', 'success'] }).default('info'),
    content: text('content', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_banner_order_idx').on(columns._order),
    index('pages_blocks_banner_parent_id_idx').on(columns._parentID),
    index('pages_blocks_banner_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages_blocks_form_block = sqliteTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: integer('enable_intro', { mode: 'boolean' }),
    introContent: text('intro_content', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('pages_blocks_form_block_order_idx').on(columns._order),
    index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    index('pages_blocks_form_block_path_idx').on(columns._path),
    index('pages_blocks_form_block_form_idx').on(columns.form),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const pages = sqliteTable(
  'pages',
  {
    id: integer('id').primaryKey(),
    title: text('title'),
    publishedOn: text('published_on').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    hero_type: text('hero_type', {
      enum: ['none', 'highImpact', 'mediumImpact', 'lowImpact'],
    }).default('lowImpact'),
    hero_richText: text('hero_rich_text', { mode: 'json' }),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: text('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: text('meta_description'),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => [
    index('pages_hero_hero_media_idx').on(columns.hero_media),
    index('pages_meta_meta_image_idx').on(columns.meta_image),
    uniqueIndex('pages_slug_idx').on(columns.slug),
    index('pages_updated_at_idx').on(columns.updatedAt),
    index('pages_created_at_idx').on(columns.createdAt),
    index('pages__status_idx').on(columns._status),
  ],
)

export const pages_rels = sqliteTable(
  'pages_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    productsID: integer('products_id'),
  },
  (columns) => [
    index('pages_rels_order_idx').on(columns.order),
    index('pages_rels_parent_idx').on(columns.parent),
    index('pages_rels_path_idx').on(columns.path),
    index('pages_rels_pages_id_idx').on(columns.pagesID),
    index('pages_rels_categories_id_idx').on(columns.categoriesID),
    index('pages_rels_products_id_idx').on(columns.productsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'pages_rels_products_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_version_hero_links = sqliteTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_pages_v_version_hero_links_order_idx').on(columns._order),
    index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_cta_links = sqliteTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_cta = sqliteTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    richText: text('rich_text', { mode: 'json' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_cta_order_idx').on(columns._order),
    index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_cta_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_content_columns = sqliteTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    size: text('size', { enum: ['oneThird', 'half', 'twoThirds', 'full'] }).default('oneThird'),
    richText: text('rich_text', { mode: 'json' }),
    enableLink: integer('enable_link', { mode: 'boolean' }),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_content = sqliteTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_content_order_idx').on(columns._order),
    index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_content_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_media_block = sqliteTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    index('_pages_v_blocks_media_block_media_idx').on(columns.media),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_archive = sqliteTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    introContent: text('intro_content', { mode: 'json' }),
    populateBy: text('populate_by', { enum: ['collection', 'selection'] }).default('collection'),
    relationTo: text('relation_to', { enum: ['products'] }).default('products'),
    limit: numeric('limit', { mode: 'number' }).default('10'),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_archive_order_idx').on(columns._order),
    index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_archive_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_carousel = sqliteTable(
  '_pages_v_blocks_carousel',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    populateBy: text('populate_by', { enum: ['collection', 'selection'] }).default('collection'),
    relationTo: text('relation_to', { enum: ['products'] }).default('products'),
    limit: numeric('limit', { mode: 'number' }).default('10'),
    populatedDocsTotal: numeric('populated_docs_total', { mode: 'number' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_carousel_order_idx').on(columns._order),
    index('_pages_v_blocks_carousel_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_carousel_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_carousel_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_three_item_grid = sqliteTable(
  '_pages_v_blocks_three_item_grid',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_three_item_grid_order_idx').on(columns._order),
    index('_pages_v_blocks_three_item_grid_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_three_item_grid_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_three_item_grid_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_banner = sqliteTable(
  '_pages_v_blocks_banner',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    style: text('style', { enum: ['info', 'warning', 'error', 'success'] }).default('info'),
    content: text('content', { mode: 'json' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_banner_order_idx').on(columns._order),
    index('_pages_v_blocks_banner_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_banner_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_banner_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v_blocks_form_block = sqliteTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: integer('enable_intro', { mode: 'boolean' }),
    introContent: text('intro_content', { mode: 'json' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    index('_pages_v_blocks_form_block_form_idx').on(columns.form),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _pages_v = sqliteTable(
  '_pages_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: text('version_title'),
    version_publishedOn: text('version_published_on').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_hero_type: text('version_hero_type', {
      enum: ['none', 'highImpact', 'mediumImpact', 'lowImpact'],
    }).default('lowImpact'),
    version_hero_richText: text('version_hero_rich_text', { mode: 'json' }),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: text('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: text('version_meta_description'),
    version_generateSlug: integer('version_generate_slug', { mode: 'boolean' }).default(true),
    version_slug: text('version_slug'),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
    autosave: integer('autosave', { mode: 'boolean' }),
  },
  (columns) => [
    index('_pages_v_parent_idx').on(columns.parent),
    index('_pages_v_version_hero_version_hero_media_idx').on(columns.version_hero_media),
    index('_pages_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    index('_pages_v_version_version_slug_idx').on(columns.version_slug),
    index('_pages_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    index('_pages_v_version_version_created_at_idx').on(columns.version_createdAt),
    index('_pages_v_version_version__status_idx').on(columns.version__status),
    index('_pages_v_created_at_idx').on(columns.createdAt),
    index('_pages_v_updated_at_idx').on(columns.updatedAt),
    index('_pages_v_latest_idx').on(columns.latest),
    index('_pages_v_autosave_idx').on(columns.autosave),
  ],
)

export const _pages_v_rels = sqliteTable(
  '_pages_v_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    productsID: integer('products_id'),
  },
  (columns) => [
    index('_pages_v_rels_order_idx').on(columns.order),
    index('_pages_v_rels_parent_idx').on(columns.parent),
    index('_pages_v_rels_path_idx').on(columns.path),
    index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    index('_pages_v_rels_categories_id_idx').on(columns.categoriesID),
    index('_pages_v_rels_products_id_idx').on(columns.productsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_pages_v_rels_products_fk',
    }).onDelete('cascade'),
  ],
)

export const categories = sqliteTable(
  'categories',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    uniqueIndex('categories_slug_idx').on(columns.slug),
    index('categories_updated_at_idx').on(columns.updatedAt),
    index('categories_created_at_idx').on(columns.createdAt),
  ],
)

export const media = sqliteTable(
  'media',
  {
    id: integer('id').primaryKey(),
    alt: text('alt').notNull(),
    caption: text('caption', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    url: text('url'),
    thumbnailURL: text('thumbnail_u_r_l'),
    filename: text('filename'),
    mimeType: text('mime_type'),
    filesize: numeric('filesize', { mode: 'number' }),
    width: numeric('width', { mode: 'number' }),
    height: numeric('height', { mode: 'number' }),
    focalX: numeric('focal_x', { mode: 'number' }),
    focalY: numeric('focal_y', { mode: 'number' }),
  },
  (columns) => [
    index('media_updated_at_idx').on(columns.updatedAt),
    index('media_created_at_idx').on(columns.createdAt),
    uniqueIndex('media_filename_idx').on(columns.filename),
  ],
)

export const forms_blocks_checkbox = sqliteTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    required: integer('required', { mode: 'boolean' }),
    defaultValue: integer('default_value', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_checkbox_order_idx').on(columns._order),
    index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    index('forms_blocks_checkbox_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_country = sqliteTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_country_order_idx').on(columns._order),
    index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    index('forms_blocks_country_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_email = sqliteTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_email_order_idx').on(columns._order),
    index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    index('forms_blocks_email_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_message = sqliteTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    message: text('message', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_message_order_idx').on(columns._order),
    index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    index('forms_blocks_message_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_number = sqliteTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    defaultValue: numeric('default_value', { mode: 'number' }),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_number_order_idx').on(columns._order),
    index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    index('forms_blocks_number_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_select_options = sqliteTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: text('_parent_id').notNull(),
    id: text('id').primaryKey(),
    label: text('label').notNull(),
    value: text('value').notNull(),
  },
  (columns) => [
    index('forms_blocks_select_options_order_idx').on(columns._order),
    index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_select = sqliteTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    defaultValue: text('default_value'),
    placeholder: text('placeholder'),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_select_order_idx').on(columns._order),
    index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    index('forms_blocks_select_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_state = sqliteTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_state_order_idx').on(columns._order),
    index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    index('forms_blocks_state_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_text = sqliteTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    defaultValue: text('default_value'),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_text_order_idx').on(columns._order),
    index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    index('forms_blocks_text_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_blocks_textarea = sqliteTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    name: text('name').notNull(),
    label: text('label'),
    width: numeric('width', { mode: 'number' }),
    defaultValue: text('default_value'),
    required: integer('required', { mode: 'boolean' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('forms_blocks_textarea_order_idx').on(columns._order),
    index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    index('forms_blocks_textarea_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms_emails = sqliteTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    emailTo: text('email_to'),
    cc: text('cc'),
    bcc: text('bcc'),
    replyTo: text('reply_to'),
    emailFrom: text('email_from'),
    subject: text('subject').notNull().default("You've received a new message."),
    message: text('message', { mode: 'json' }),
  },
  (columns) => [
    index('forms_emails_order_idx').on(columns._order),
    index('forms_emails_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const forms = sqliteTable(
  'forms',
  {
    id: integer('id').primaryKey(),
    title: text('title').notNull(),
    submitButtonLabel: text('submit_button_label'),
    confirmationType: text('confirmation_type', { enum: ['message', 'redirect'] }).default(
      'message',
    ),
    confirmationMessage: text('confirmation_message', { mode: 'json' }),
    redirect_url: text('redirect_url'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('forms_updated_at_idx').on(columns.updatedAt),
    index('forms_created_at_idx').on(columns.createdAt),
  ],
)

export const form_submissions_submission_data = sqliteTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    field: text('field').notNull(),
    value: text('value').notNull(),
  },
  (columns) => [
    index('form_submissions_submission_data_order_idx').on(columns._order),
    index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const form_submissions = sqliteTable(
  'form_submissions',
  {
    id: integer('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('form_submissions_form_idx').on(columns.form),
    index('form_submissions_updated_at_idx').on(columns.updatedAt),
    index('form_submissions_created_at_idx').on(columns.createdAt),
  ],
)

export const addresses = sqliteTable(
  'addresses',
  {
    id: integer('id').primaryKey(),
    customer: integer('customer_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    title: text('title'),
    firstName: text('first_name'),
    lastName: text('last_name'),
    company: text('company'),
    addressLine1: text('address_line1'),
    addressLine2: text('address_line2'),
    city: text('city'),
    state: text('state'),
    postalCode: text('postal_code'),
    country: text('country', {
      enum: [
        'US',
        'GB',
        'CA',
        'AU',
        'AT',
        'BE',
        'BR',
        'BG',
        'CY',
        'CZ',
        'DK',
        'EE',
        'FI',
        'FR',
        'DE',
        'GR',
        'HK',
        'HU',
        'IN',
        'IE',
        'IT',
        'JP',
        'LV',
        'LT',
        'LU',
        'MY',
        'MT',
        'MX',
        'NL',
        'NZ',
        'NO',
        'PL',
        'PT',
        'RO',
        'SG',
        'SK',
        'SI',
        'ES',
        'SE',
        'CH',
      ],
    }).notNull(),
    phone: text('phone'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('addresses_customer_idx').on(columns.customer),
    index('addresses_updated_at_idx').on(columns.updatedAt),
    index('addresses_created_at_idx').on(columns.createdAt),
  ],
)

export const variants = sqliteTable(
  'variants',
  {
    id: integer('id').primaryKey(),
    title: text('title'),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    inventory: numeric('inventory', { mode: 'number' }).default('0'),
    priceInUSDEnabled: integer('price_in_u_s_d_enabled', { mode: 'boolean' }),
    priceInUSD: numeric('price_in_u_s_d', { mode: 'number' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    deletedAt: text('deleted_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => [
    index('variants_product_idx').on(columns.product),
    index('variants_updated_at_idx').on(columns.updatedAt),
    index('variants_created_at_idx').on(columns.createdAt),
    index('variants_deleted_at_idx').on(columns.deletedAt),
    index('variants__status_idx').on(columns._status),
  ],
)

export const variants_rels = sqliteTable(
  'variants_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    variantOptionsID: integer('variant_options_id'),
  },
  (columns) => [
    index('variants_rels_order_idx').on(columns.order),
    index('variants_rels_parent_idx').on(columns.parent),
    index('variants_rels_path_idx').on(columns.path),
    index('variants_rels_variant_options_id_idx').on(columns.variantOptionsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [variants.id],
      name: 'variants_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantOptionsID']],
      foreignColumns: [variant_options.id],
      name: 'variants_rels_variant_options_fk',
    }).onDelete('cascade'),
  ],
)

export const _variants_v = sqliteTable(
  '_variants_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => variants.id, {
      onDelete: 'set null',
    }),
    version_title: text('version_title'),
    version_product: integer('version_product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_inventory: numeric('version_inventory', { mode: 'number' }).default('0'),
    version_priceInUSDEnabled: integer('version_price_in_u_s_d_enabled', { mode: 'boolean' }),
    version_priceInUSD: numeric('version_price_in_u_s_d', { mode: 'number' }),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_deletedAt: text('version_deleted_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
    autosave: integer('autosave', { mode: 'boolean' }),
  },
  (columns) => [
    index('_variants_v_parent_idx').on(columns.parent),
    index('_variants_v_version_version_product_idx').on(columns.version_product),
    index('_variants_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    index('_variants_v_version_version_created_at_idx').on(columns.version_createdAt),
    index('_variants_v_version_version_deleted_at_idx').on(columns.version_deletedAt),
    index('_variants_v_version_version__status_idx').on(columns.version__status),
    index('_variants_v_created_at_idx').on(columns.createdAt),
    index('_variants_v_updated_at_idx').on(columns.updatedAt),
    index('_variants_v_latest_idx').on(columns.latest),
    index('_variants_v_autosave_idx').on(columns.autosave),
  ],
)

export const _variants_v_rels = sqliteTable(
  '_variants_v_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    variantOptionsID: integer('variant_options_id'),
  },
  (columns) => [
    index('_variants_v_rels_order_idx').on(columns.order),
    index('_variants_v_rels_parent_idx').on(columns.parent),
    index('_variants_v_rels_path_idx').on(columns.path),
    index('_variants_v_rels_variant_options_id_idx').on(columns.variantOptionsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_variants_v.id],
      name: '_variants_v_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantOptionsID']],
      foreignColumns: [variant_options.id],
      name: '_variants_v_rels_variant_options_fk',
    }).onDelete('cascade'),
  ],
)

export const variant_types = sqliteTable(
  'variant_types',
  {
    id: integer('id').primaryKey(),
    label: text('label').notNull(),
    name: text('name').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    deletedAt: text('deleted_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('variant_types_updated_at_idx').on(columns.updatedAt),
    index('variant_types_created_at_idx').on(columns.createdAt),
    index('variant_types_deleted_at_idx').on(columns.deletedAt),
  ],
)

export const variant_options = sqliteTable(
  'variant_options',
  {
    id: integer('id').primaryKey(),
    _variantOptions_options_order: text('_variantoptions_options_order'),
    variantType: integer('variant_type_id')
      .notNull()
      .references(() => variant_types.id, {
        onDelete: 'set null',
      }),
    label: text('label').notNull(),
    value: text('value').notNull(),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    deletedAt: text('deleted_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('variant_options__variantoptions_options_order_idx').on(
      columns._variantOptions_options_order,
    ),
    index('variant_options_variant_type_idx').on(columns.variantType),
    index('variant_options_updated_at_idx').on(columns.updatedAt),
    index('variant_options_created_at_idx').on(columns.createdAt),
    index('variant_options_deleted_at_idx').on(columns.deletedAt),
  ],
)

export const products_gallery = sqliteTable(
  'products_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    variantOption: integer('variant_option_id').references(() => variant_options.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => [
    index('products_gallery_order_idx').on(columns._order),
    index('products_gallery_parent_id_idx').on(columns._parentID),
    index('products_gallery_image_idx').on(columns.image),
    index('products_gallery_variant_option_idx').on(columns.variantOption),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_gallery_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products_blocks_cta_links = sqliteTable(
  'products_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: text('_parent_id').notNull(),
    id: text('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
  },
  (columns) => [
    index('products_blocks_cta_links_order_idx').on(columns._order),
    index('products_blocks_cta_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_blocks_cta.id],
      name: 'products_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products_blocks_cta = sqliteTable(
  'products_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    richText: text('rich_text', { mode: 'json' }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('products_blocks_cta_order_idx').on(columns._order),
    index('products_blocks_cta_parent_id_idx').on(columns._parentID),
    index('products_blocks_cta_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products_blocks_content_columns = sqliteTable(
  'products_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: text('_parent_id').notNull(),
    id: text('id').primaryKey(),
    size: text('size', { enum: ['oneThird', 'half', 'twoThirds', 'full'] }).default('oneThird'),
    richText: text('rich_text', { mode: 'json' }),
    enableLink: integer('enable_link', { mode: 'boolean' }),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
  },
  (columns) => [
    index('products_blocks_content_columns_order_idx').on(columns._order),
    index('products_blocks_content_columns_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products_blocks_content.id],
      name: 'products_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products_blocks_content = sqliteTable(
  'products_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    blockName: text('block_name'),
  },
  (columns) => [
    index('products_blocks_content_order_idx').on(columns._order),
    index('products_blocks_content_parent_id_idx').on(columns._parentID),
    index('products_blocks_content_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products_blocks_media_block = sqliteTable(
  'products_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: text('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: text('block_name'),
  },
  (columns) => [
    index('products_blocks_media_block_order_idx').on(columns._order),
    index('products_blocks_media_block_parent_id_idx').on(columns._parentID),
    index('products_blocks_media_block_path_idx').on(columns._path),
    index('products_blocks_media_block_media_idx').on(columns.media),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const products = sqliteTable(
  'products',
  {
    id: integer('id').primaryKey(),
    title: text('title'),
    description: text('description', { mode: 'json' }),
    inventory: numeric('inventory', { mode: 'number' }).default('0'),
    enableVariants: integer('enable_variants', { mode: 'boolean' }),
    priceInUSDEnabled: integer('price_in_u_s_d_enabled', { mode: 'boolean' }),
    priceInUSD: numeric('price_in_u_s_d', { mode: 'number' }),
    meta_title: text('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: text('meta_description'),
    generateSlug: integer('generate_slug', { mode: 'boolean' }).default(true),
    slug: text('slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    deletedAt: text('deleted_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    _status: text('_status', { enum: ['draft', 'published'] }).default('draft'),
  },
  (columns) => [
    index('products_meta_meta_image_idx').on(columns.meta_image),
    uniqueIndex('products_slug_idx').on(columns.slug),
    index('products_updated_at_idx').on(columns.updatedAt),
    index('products_created_at_idx').on(columns.createdAt),
    index('products_deleted_at_idx').on(columns.deletedAt),
    index('products__status_idx').on(columns._status),
  ],
)

export const products_rels = sqliteTable(
  'products_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
    variantTypesID: integer('variant_types_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => [
    index('products_rels_order_idx').on(columns.order),
    index('products_rels_parent_idx').on(columns.parent),
    index('products_rels_path_idx').on(columns.path),
    index('products_rels_pages_id_idx').on(columns.pagesID),
    index('products_rels_variant_types_id_idx').on(columns.variantTypesID),
    index('products_rels_products_id_idx').on(columns.productsID),
    index('products_rels_categories_id_idx').on(columns.categoriesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'products_rels_pages_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantTypesID']],
      foreignColumns: [variant_types.id],
      name: 'products_rels_variant_types_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'products_rels_products_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'products_rels_categories_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_version_gallery = sqliteTable(
  '_products_v_version_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    variantOption: integer('variant_option_id').references(() => variant_options.id, {
      onDelete: 'set null',
    }),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_products_v_version_gallery_order_idx').on(columns._order),
    index('_products_v_version_gallery_parent_id_idx').on(columns._parentID),
    index('_products_v_version_gallery_image_idx').on(columns.image),
    index('_products_v_version_gallery_variant_option_idx').on(columns.variantOption),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_version_gallery_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_blocks_cta_links = sqliteTable(
  '_products_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_products_v_blocks_cta_links_order_idx').on(columns._order),
    index('_products_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_blocks_cta.id],
      name: '_products_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_blocks_cta = sqliteTable(
  '_products_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    richText: text('rich_text', { mode: 'json' }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_products_v_blocks_cta_order_idx').on(columns._order),
    index('_products_v_blocks_cta_parent_id_idx').on(columns._parentID),
    index('_products_v_blocks_cta_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_blocks_content_columns = sqliteTable(
  '_products_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: integer('id').primaryKey(),
    size: text('size', { enum: ['oneThird', 'half', 'twoThirds', 'full'] }).default('oneThird'),
    richText: text('rich_text', { mode: 'json' }),
    enableLink: integer('enable_link', { mode: 'boolean' }),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label'),
    link_appearance: text('link_appearance', { enum: ['default', 'outline'] }).default('default'),
    _uuid: text('_uuid'),
  },
  (columns) => [
    index('_products_v_blocks_content_columns_order_idx').on(columns._order),
    index('_products_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v_blocks_content.id],
      name: '_products_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_blocks_content = sqliteTable(
  '_products_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_products_v_blocks_content_order_idx').on(columns._order),
    index('_products_v_blocks_content_parent_id_idx').on(columns._parentID),
    index('_products_v_blocks_content_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v_blocks_media_block = sqliteTable(
  '_products_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: integer('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: text('_uuid'),
    blockName: text('block_name'),
  },
  (columns) => [
    index('_products_v_blocks_media_block_order_idx').on(columns._order),
    index('_products_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    index('_products_v_blocks_media_block_path_idx').on(columns._path),
    index('_products_v_blocks_media_block_media_idx').on(columns.media),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_products_v.id],
      name: '_products_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const _products_v = sqliteTable(
  '_products_v',
  {
    id: integer('id').primaryKey(),
    parent: integer('parent_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    version_title: text('version_title'),
    version_description: text('version_description', { mode: 'json' }),
    version_inventory: numeric('version_inventory', { mode: 'number' }).default('0'),
    version_enableVariants: integer('version_enable_variants', { mode: 'boolean' }),
    version_priceInUSDEnabled: integer('version_price_in_u_s_d_enabled', { mode: 'boolean' }),
    version_priceInUSD: numeric('version_price_in_u_s_d', { mode: 'number' }),
    version_meta_title: text('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: text('version_meta_description'),
    version_generateSlug: integer('version_generate_slug', { mode: 'boolean' }).default(true),
    version_slug: text('version_slug'),
    version_updatedAt: text('version_updated_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_createdAt: text('version_created_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version_deletedAt: text('version_deleted_at').default(
      sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
    ),
    version__status: text('version__status', { enum: ['draft', 'published'] }).default('draft'),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    latest: integer('latest', { mode: 'boolean' }),
    autosave: integer('autosave', { mode: 'boolean' }),
  },
  (columns) => [
    index('_products_v_parent_idx').on(columns.parent),
    index('_products_v_version_meta_version_meta_image_idx').on(columns.version_meta_image),
    index('_products_v_version_version_slug_idx').on(columns.version_slug),
    index('_products_v_version_version_updated_at_idx').on(columns.version_updatedAt),
    index('_products_v_version_version_created_at_idx').on(columns.version_createdAt),
    index('_products_v_version_version_deleted_at_idx').on(columns.version_deletedAt),
    index('_products_v_version_version__status_idx').on(columns.version__status),
    index('_products_v_created_at_idx').on(columns.createdAt),
    index('_products_v_updated_at_idx').on(columns.updatedAt),
    index('_products_v_latest_idx').on(columns.latest),
    index('_products_v_autosave_idx').on(columns.autosave),
  ],
)

export const _products_v_rels = sqliteTable(
  '_products_v_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
    variantTypesID: integer('variant_types_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => [
    index('_products_v_rels_order_idx').on(columns.order),
    index('_products_v_rels_parent_idx').on(columns.parent),
    index('_products_v_rels_path_idx').on(columns.path),
    index('_products_v_rels_pages_id_idx').on(columns.pagesID),
    index('_products_v_rels_variant_types_id_idx').on(columns.variantTypesID),
    index('_products_v_rels_products_id_idx').on(columns.productsID),
    index('_products_v_rels_categories_id_idx').on(columns.categoriesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_products_v.id],
      name: '_products_v_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_products_v_rels_pages_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantTypesID']],
      foreignColumns: [variant_types.id],
      name: '_products_v_rels_variant_types_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_products_v_rels_products_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_products_v_rels_categories_fk',
    }).onDelete('cascade'),
  ],
)

export const carts_items = sqliteTable(
  'carts_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    variant: integer('variant_id').references(() => variants.id, {
      onDelete: 'set null',
    }),
    quantity: numeric('quantity', { mode: 'number' }).notNull().default('1'),
  },
  (columns) => [
    index('carts_items_order_idx').on(columns._order),
    index('carts_items_parent_id_idx').on(columns._parentID),
    index('carts_items_product_idx').on(columns.product),
    index('carts_items_variant_idx').on(columns.variant),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [carts.id],
      name: 'carts_items_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const carts = sqliteTable(
  'carts',
  {
    id: integer('id').primaryKey(),
    customer: integer('customer_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    purchasedAt: text('purchased_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    subtotal: numeric('subtotal', { mode: 'number' }),
    currency: text('currency', { enum: ['USD'] }).default('USD'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('carts_customer_idx').on(columns.customer),
    index('carts_updated_at_idx').on(columns.updatedAt),
    index('carts_created_at_idx').on(columns.createdAt),
  ],
)

export const orders_items = sqliteTable(
  'orders_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    variant: integer('variant_id').references(() => variants.id, {
      onDelete: 'set null',
    }),
    quantity: numeric('quantity', { mode: 'number' }).notNull().default('1'),
  },
  (columns) => [
    index('orders_items_order_idx').on(columns._order),
    index('orders_items_parent_id_idx').on(columns._parentID),
    index('orders_items_product_idx').on(columns.product),
    index('orders_items_variant_idx').on(columns.variant),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_items_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const orders = sqliteTable(
  'orders',
  {
    id: integer('id').primaryKey(),
    shippingAddress_title: text('shipping_address_title'),
    shippingAddress_firstName: text('shipping_address_first_name'),
    shippingAddress_lastName: text('shipping_address_last_name'),
    shippingAddress_company: text('shipping_address_company'),
    shippingAddress_addressLine1: text('shipping_address_address_line1'),
    shippingAddress_addressLine2: text('shipping_address_address_line2'),
    shippingAddress_city: text('shipping_address_city'),
    shippingAddress_state: text('shipping_address_state'),
    shippingAddress_postalCode: text('shipping_address_postal_code'),
    shippingAddress_country: text('shipping_address_country'),
    shippingAddress_phone: text('shipping_address_phone'),
    customer: integer('customer_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    customerEmail: text('customer_email'),
    status: text('status', { enum: ['processing', 'completed', 'cancelled', 'refunded'] }).default(
      'processing',
    ),
    amount: numeric('amount', { mode: 'number' }),
    currency: text('currency', { enum: ['USD'] }).default('USD'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('orders_customer_idx').on(columns.customer),
    index('orders_updated_at_idx').on(columns.updatedAt),
    index('orders_created_at_idx').on(columns.createdAt),
  ],
)

export const orders_rels = sqliteTable(
  'orders_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    transactionsID: integer('transactions_id'),
  },
  (columns) => [
    index('orders_rels_order_idx').on(columns.order),
    index('orders_rels_parent_idx').on(columns.parent),
    index('orders_rels_path_idx').on(columns.path),
    index('orders_rels_transactions_id_idx').on(columns.transactionsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [orders.id],
      name: 'orders_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['transactionsID']],
      foreignColumns: [transactions.id],
      name: 'orders_rels_transactions_fk',
    }).onDelete('cascade'),
  ],
)

export const transactions_items = sqliteTable(
  'transactions_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    product: integer('product_id').references(() => products.id, {
      onDelete: 'set null',
    }),
    variant: integer('variant_id').references(() => variants.id, {
      onDelete: 'set null',
    }),
    quantity: numeric('quantity', { mode: 'number' }).notNull().default('1'),
  },
  (columns) => [
    index('transactions_items_order_idx').on(columns._order),
    index('transactions_items_parent_id_idx').on(columns._parentID),
    index('transactions_items_product_idx').on(columns.product),
    index('transactions_items_variant_idx').on(columns.variant),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [transactions.id],
      name: 'transactions_items_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const transactions = sqliteTable(
  'transactions',
  {
    id: integer('id').primaryKey(),
    paymentMethod: text('payment_method', { enum: ['stripe'] }),
    stripe_customerID: text('stripe_customer_i_d'),
    stripe_paymentIntentID: text('stripe_payment_intent_i_d'),
    billingAddress_title: text('billing_address_title'),
    billingAddress_firstName: text('billing_address_first_name'),
    billingAddress_lastName: text('billing_address_last_name'),
    billingAddress_company: text('billing_address_company'),
    billingAddress_addressLine1: text('billing_address_address_line1'),
    billingAddress_addressLine2: text('billing_address_address_line2'),
    billingAddress_city: text('billing_address_city'),
    billingAddress_state: text('billing_address_state'),
    billingAddress_postalCode: text('billing_address_postal_code'),
    billingAddress_country: text('billing_address_country'),
    billingAddress_phone: text('billing_address_phone'),
    status: text('status', {
      enum: ['pending', 'succeeded', 'failed', 'cancelled', 'expired', 'refunded'],
    })
      .notNull()
      .default('pending'),
    customer: integer('customer_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    customerEmail: text('customer_email'),
    order: integer('order_id').references(() => orders.id, {
      onDelete: 'set null',
    }),
    cart: integer('cart_id').references(() => carts.id, {
      onDelete: 'set null',
    }),
    amount: numeric('amount', { mode: 'number' }),
    currency: text('currency', { enum: ['USD'] }).default('USD'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('transactions_customer_idx').on(columns.customer),
    index('transactions_order_idx').on(columns.order),
    index('transactions_cart_idx').on(columns.cart),
    index('transactions_updated_at_idx').on(columns.updatedAt),
    index('transactions_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents = sqliteTable(
  'payload_locked_documents',
  {
    id: integer('id').primaryKey(),
    globalSlug: text('global_slug'),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents_rels = sqliteTable(
  'payload_locked_documents_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
    pagesID: integer('pages_id'),
    categoriesID: integer('categories_id'),
    mediaID: integer('media_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    addressesID: integer('addresses_id'),
    variantsID: integer('variants_id'),
    variantTypesID: integer('variant_types_id'),
    variantOptionsID: integer('variant_options_id'),
    productsID: integer('products_id'),
    cartsID: integer('carts_id'),
    ordersID: integer('orders_id'),
    transactionsID: integer('transactions_id'),
  },
  (columns) => [
    index('payload_locked_documents_rels_order_idx').on(columns.order),
    index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    index('payload_locked_documents_rels_path_idx').on(columns.path),
    index('payload_locked_documents_rels_users_id_idx').on(columns.usersID),
    index('payload_locked_documents_rels_pages_id_idx').on(columns.pagesID),
    index('payload_locked_documents_rels_categories_id_idx').on(columns.categoriesID),
    index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID),
    index('payload_locked_documents_rels_forms_id_idx').on(columns.formsID),
    index('payload_locked_documents_rels_form_submissions_id_idx').on(
      columns['form-submissionsID'],
    ),
    index('payload_locked_documents_rels_addresses_id_idx').on(columns.addressesID),
    index('payload_locked_documents_rels_variants_id_idx').on(columns.variantsID),
    index('payload_locked_documents_rels_variant_types_id_idx').on(columns.variantTypesID),
    index('payload_locked_documents_rels_variant_options_id_idx').on(columns.variantOptionsID),
    index('payload_locked_documents_rels_products_id_idx').on(columns.productsID),
    index('payload_locked_documents_rels_carts_id_idx').on(columns.cartsID),
    index('payload_locked_documents_rels_orders_id_idx').on(columns.ordersID),
    index('payload_locked_documents_rels_transactions_id_idx').on(columns.transactionsID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['addressesID']],
      foreignColumns: [addresses.id],
      name: 'payload_locked_documents_rels_addresses_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantsID']],
      foreignColumns: [variants.id],
      name: 'payload_locked_documents_rels_variants_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantTypesID']],
      foreignColumns: [variant_types.id],
      name: 'payload_locked_documents_rels_variant_types_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['variantOptionsID']],
      foreignColumns: [variant_options.id],
      name: 'payload_locked_documents_rels_variant_options_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['cartsID']],
      foreignColumns: [carts.id],
      name: 'payload_locked_documents_rels_carts_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['transactionsID']],
      foreignColumns: [transactions.id],
      name: 'payload_locked_documents_rels_transactions_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_preferences = sqliteTable(
  'payload_preferences',
  {
    id: integer('id').primaryKey(),
    key: text('key'),
    value: text('value', { mode: 'json' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_preferences_key_idx').on(columns.key),
    index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    index('payload_preferences_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_preferences_rels = sqliteTable(
  'payload_preferences_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => [
    index('payload_preferences_rels_order_idx').on(columns.order),
    index('payload_preferences_rels_parent_idx').on(columns.parent),
    index('payload_preferences_rels_path_idx').on(columns.path),
    index('payload_preferences_rels_users_id_idx').on(columns.usersID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_migrations = sqliteTable(
  'payload_migrations',
  {
    id: integer('id').primaryKey(),
    name: text('name'),
    batch: numeric('batch', { mode: 'number' }),
    updatedAt: text('updated_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    createdAt: text('created_at')
      .notNull()
      .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  },
  (columns) => [
    index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    index('payload_migrations_created_at_idx').on(columns.createdAt),
  ],
)

export const header_nav_items = sqliteTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label').notNull(),
  },
  (columns) => [
    index('header_nav_items_order_idx').on(columns._order),
    index('header_nav_items_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const header = sqliteTable('header', {
  id: integer('id').primaryKey(),
  updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
})

export const header_rels = sqliteTable(
  'header_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => [
    index('header_rels_order_idx').on(columns.order),
    index('header_rels_parent_idx').on(columns.parent),
    index('header_rels_path_idx').on(columns.path),
    index('header_rels_pages_id_idx').on(columns.pagesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
  ],
)

export const footer_nav_items = sqliteTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: text('id').primaryKey(),
    link_type: text('link_type', { enum: ['reference', 'custom'] }).default('reference'),
    link_newTab: integer('link_new_tab', { mode: 'boolean' }),
    link_url: text('link_url'),
    link_label: text('link_label').notNull(),
  },
  (columns) => [
    index('footer_nav_items_order_idx').on(columns._order),
    index('footer_nav_items_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const footer = sqliteTable('footer', {
  id: integer('id').primaryKey(),
  updatedAt: text('updated_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
  createdAt: text('created_at').default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
})

export const footer_rels = sqliteTable(
  'footer_rels',
  {
    id: integer('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: text('path').notNull(),
    pagesID: integer('pages_id'),
  },
  (columns) => [
    index('footer_rels_order_idx').on(columns.order),
    index('footer_rels_parent_idx').on(columns.parent),
    index('footer_rels_path_idx').on(columns.path),
    index('footer_rels_pages_id_idx').on(columns.pagesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
  ],
)

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: 'roles',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  roles: many(users_roles, {
    relationName: 'roles',
  }),
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_carousel = relations(pages_blocks_carousel, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_carousel._parentID],
    references: [pages.id],
    relationName: '_blocks_carousel',
  }),
}))
export const relations_pages_blocks_three_item_grid = relations(
  pages_blocks_three_item_grid,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_three_item_grid._parentID],
      references: [pages.id],
      relationName: '_blocks_threeItemGrid',
    }),
  }),
)
export const relations_pages_blocks_banner = relations(pages_blocks_banner, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_banner._parentID],
    references: [pages.id],
    relationName: '_blocks_banner',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_carousel: many(pages_blocks_carousel, {
    relationName: '_blocks_carousel',
  }),
  _blocks_threeItemGrid: many(pages_blocks_three_item_grid, {
    relationName: '_blocks_threeItemGrid',
  }),
  _blocks_banner: many(pages_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_carousel = relations(
  _pages_v_blocks_carousel,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_carousel._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_carousel',
    }),
  }),
)
export const relations__pages_v_blocks_three_item_grid = relations(
  _pages_v_blocks_three_item_grid,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_three_item_grid._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_threeItemGrid',
    }),
  }),
)
export const relations__pages_v_blocks_banner = relations(_pages_v_blocks_banner, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_banner._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_banner',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_carousel: many(_pages_v_blocks_carousel, {
    relationName: '_blocks_carousel',
  }),
  _blocks_threeItemGrid: many(_pages_v_blocks_three_item_grid, {
    relationName: '_blocks_threeItemGrid',
  }),
  _blocks_banner: many(_pages_v_blocks_banner, {
    relationName: '_blocks_banner',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_categories = relations(categories, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_addresses = relations(addresses, ({ one }) => ({
  customer: one(users, {
    fields: [addresses.customer],
    references: [users.id],
    relationName: 'customer',
  }),
}))
export const relations_variants_rels = relations(variants_rels, ({ one }) => ({
  parent: one(variants, {
    fields: [variants_rels.parent],
    references: [variants.id],
    relationName: '_rels',
  }),
  variantOptionsID: one(variant_options, {
    fields: [variants_rels.variantOptionsID],
    references: [variant_options.id],
    relationName: 'variantOptions',
  }),
}))
export const relations_variants = relations(variants, ({ one, many }) => ({
  product: one(products, {
    fields: [variants.product],
    references: [products.id],
    relationName: 'product',
  }),
  _rels: many(variants_rels, {
    relationName: '_rels',
  }),
}))
export const relations__variants_v_rels = relations(_variants_v_rels, ({ one }) => ({
  parent: one(_variants_v, {
    fields: [_variants_v_rels.parent],
    references: [_variants_v.id],
    relationName: '_rels',
  }),
  variantOptionsID: one(variant_options, {
    fields: [_variants_v_rels.variantOptionsID],
    references: [variant_options.id],
    relationName: 'variantOptions',
  }),
}))
export const relations__variants_v = relations(_variants_v, ({ one, many }) => ({
  parent: one(variants, {
    fields: [_variants_v.parent],
    references: [variants.id],
    relationName: 'parent',
  }),
  version_product: one(products, {
    fields: [_variants_v.version_product],
    references: [products.id],
    relationName: 'version_product',
  }),
  _rels: many(_variants_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_variant_types = relations(variant_types, () => ({}))
export const relations_variant_options = relations(variant_options, ({ one }) => ({
  variantType: one(variant_types, {
    fields: [variant_options.variantType],
    references: [variant_types.id],
    relationName: 'variantType',
  }),
}))
export const relations_products_gallery = relations(products_gallery, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_gallery._parentID],
    references: [products.id],
    relationName: 'gallery',
  }),
  image: one(media, {
    fields: [products_gallery.image],
    references: [media.id],
    relationName: 'image',
  }),
  variantOption: one(variant_options, {
    fields: [products_gallery.variantOption],
    references: [variant_options.id],
    relationName: 'variantOption',
  }),
}))
export const relations_products_blocks_cta_links = relations(
  products_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(products_blocks_cta, {
      fields: [products_blocks_cta_links._parentID],
      references: [products_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations_products_blocks_cta = relations(products_blocks_cta, ({ one, many }) => ({
  _parentID: one(products, {
    fields: [products_blocks_cta._parentID],
    references: [products.id],
    relationName: '_blocks_cta',
  }),
  links: many(products_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_products_blocks_content_columns = relations(
  products_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(products_blocks_content, {
      fields: [products_blocks_content_columns._parentID],
      references: [products_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_products_blocks_content = relations(
  products_blocks_content,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_blocks_content._parentID],
      references: [products.id],
      relationName: '_blocks_content',
    }),
    columns: many(products_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations_products_blocks_media_block = relations(
  products_blocks_media_block,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_blocks_media_block._parentID],
      references: [products.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [products_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [products_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  variantTypesID: one(variant_types, {
    fields: [products_rels.variantTypesID],
    references: [variant_types.id],
    relationName: 'variantTypes',
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [products_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_products = relations(products, ({ one, many }) => ({
  gallery: many(products_gallery, {
    relationName: 'gallery',
  }),
  _blocks_cta: many(products_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(products_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(products_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  meta_image: one(media, {
    fields: [products.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations__products_v_version_gallery = relations(
  _products_v_version_gallery,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_gallery._parentID],
      references: [_products_v.id],
      relationName: 'version_gallery',
    }),
    image: one(media, {
      fields: [_products_v_version_gallery.image],
      references: [media.id],
      relationName: 'image',
    }),
    variantOption: one(variant_options, {
      fields: [_products_v_version_gallery.variantOption],
      references: [variant_options.id],
      relationName: 'variantOption',
    }),
  }),
)
export const relations__products_v_blocks_cta_links = relations(
  _products_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_cta, {
      fields: [_products_v_blocks_cta_links._parentID],
      references: [_products_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__products_v_blocks_cta = relations(
  _products_v_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_cta._parentID],
      references: [_products_v.id],
      relationName: '_blocks_cta',
    }),
    links: many(_products_v_blocks_cta_links, {
      relationName: 'links',
    }),
  }),
)
export const relations__products_v_blocks_content_columns = relations(
  _products_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_content, {
      fields: [_products_v_blocks_content_columns._parentID],
      references: [_products_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__products_v_blocks_content = relations(
  _products_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_content._parentID],
      references: [_products_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_products_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__products_v_blocks_media_block = relations(
  _products_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_media_block._parentID],
      references: [_products_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_products_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__products_v_rels = relations(_products_v_rels, ({ one }) => ({
  parent: one(_products_v, {
    fields: [_products_v_rels.parent],
    references: [_products_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_products_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  variantTypesID: one(variant_types, {
    fields: [_products_v_rels.variantTypesID],
    references: [variant_types.id],
    relationName: 'variantTypes',
  }),
  productsID: one(products, {
    fields: [_products_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [_products_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__products_v = relations(_products_v, ({ one, many }) => ({
  parent: one(products, {
    fields: [_products_v.parent],
    references: [products.id],
    relationName: 'parent',
  }),
  version_gallery: many(_products_v_version_gallery, {
    relationName: 'version_gallery',
  }),
  _blocks_cta: many(_products_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_products_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_products_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  version_meta_image: one(media, {
    fields: [_products_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_products_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_carts_items = relations(carts_items, ({ one }) => ({
  _parentID: one(carts, {
    fields: [carts_items._parentID],
    references: [carts.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [carts_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  variant: one(variants, {
    fields: [carts_items.variant],
    references: [variants.id],
    relationName: 'variant',
  }),
}))
export const relations_carts = relations(carts, ({ one, many }) => ({
  items: many(carts_items, {
    relationName: 'items',
  }),
  customer: one(users, {
    fields: [carts.customer],
    references: [users.id],
    relationName: 'customer',
  }),
}))
export const relations_orders_items = relations(orders_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_items._parentID],
    references: [orders.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [orders_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  variant: one(variants, {
    fields: [orders_items.variant],
    references: [variants.id],
    relationName: 'variant',
  }),
}))
export const relations_orders_rels = relations(orders_rels, ({ one }) => ({
  parent: one(orders, {
    fields: [orders_rels.parent],
    references: [orders.id],
    relationName: '_rels',
  }),
  transactionsID: one(transactions, {
    fields: [orders_rels.transactionsID],
    references: [transactions.id],
    relationName: 'transactions',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  items: many(orders_items, {
    relationName: 'items',
  }),
  customer: one(users, {
    fields: [orders.customer],
    references: [users.id],
    relationName: 'customer',
  }),
  _rels: many(orders_rels, {
    relationName: '_rels',
  }),
}))
export const relations_transactions_items = relations(transactions_items, ({ one }) => ({
  _parentID: one(transactions, {
    fields: [transactions_items._parentID],
    references: [transactions.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [transactions_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  variant: one(variants, {
    fields: [transactions_items.variant],
    references: [variants.id],
    relationName: 'variant',
  }),
}))
export const relations_transactions = relations(transactions, ({ one, many }) => ({
  items: many(transactions_items, {
    relationName: 'items',
  }),
  customer: one(users, {
    fields: [transactions.customer],
    references: [users.id],
    relationName: 'customer',
  }),
  order: one(orders, {
    fields: [transactions.order],
    references: [orders.id],
    relationName: 'order',
  }),
  cart: one(carts, {
    fields: [transactions.cart],
    references: [carts.id],
    relationName: 'cart',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    addressesID: one(addresses, {
      fields: [payload_locked_documents_rels.addressesID],
      references: [addresses.id],
      relationName: 'addresses',
    }),
    variantsID: one(variants, {
      fields: [payload_locked_documents_rels.variantsID],
      references: [variants.id],
      relationName: 'variants',
    }),
    variantTypesID: one(variant_types, {
      fields: [payload_locked_documents_rels.variantTypesID],
      references: [variant_types.id],
      relationName: 'variantTypes',
    }),
    variantOptionsID: one(variant_options, {
      fields: [payload_locked_documents_rels.variantOptionsID],
      references: [variant_options.id],
      relationName: 'variantOptions',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    cartsID: one(carts, {
      fields: [payload_locked_documents_rels.cartsID],
      references: [carts.id],
      relationName: 'carts',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    transactionsID: one(transactions, {
      fields: [payload_locked_documents_rels.transactionsID],
      references: [transactions.id],
      relationName: 'transactions',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  users_roles: typeof users_roles
  users_sessions: typeof users_sessions
  users: typeof users
  pages_hero_links: typeof pages_hero_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_carousel: typeof pages_blocks_carousel
  pages_blocks_three_item_grid: typeof pages_blocks_three_item_grid
  pages_blocks_banner: typeof pages_blocks_banner
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_carousel: typeof _pages_v_blocks_carousel
  _pages_v_blocks_three_item_grid: typeof _pages_v_blocks_three_item_grid
  _pages_v_blocks_banner: typeof _pages_v_blocks_banner
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  categories: typeof categories
  media: typeof media
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  addresses: typeof addresses
  variants: typeof variants
  variants_rels: typeof variants_rels
  _variants_v: typeof _variants_v
  _variants_v_rels: typeof _variants_v_rels
  variant_types: typeof variant_types
  variant_options: typeof variant_options
  products_gallery: typeof products_gallery
  products_blocks_cta_links: typeof products_blocks_cta_links
  products_blocks_cta: typeof products_blocks_cta
  products_blocks_content_columns: typeof products_blocks_content_columns
  products_blocks_content: typeof products_blocks_content
  products_blocks_media_block: typeof products_blocks_media_block
  products: typeof products
  products_rels: typeof products_rels
  _products_v_version_gallery: typeof _products_v_version_gallery
  _products_v_blocks_cta_links: typeof _products_v_blocks_cta_links
  _products_v_blocks_cta: typeof _products_v_blocks_cta
  _products_v_blocks_content_columns: typeof _products_v_blocks_content_columns
  _products_v_blocks_content: typeof _products_v_blocks_content
  _products_v_blocks_media_block: typeof _products_v_blocks_media_block
  _products_v: typeof _products_v
  _products_v_rels: typeof _products_v_rels
  carts_items: typeof carts_items
  carts: typeof carts
  orders_items: typeof orders_items
  orders: typeof orders
  orders_rels: typeof orders_rels
  transactions_items: typeof transactions_items
  transactions: typeof transactions
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_users_roles: typeof relations_users_roles
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_carousel: typeof relations_pages_blocks_carousel
  relations_pages_blocks_three_item_grid: typeof relations_pages_blocks_three_item_grid
  relations_pages_blocks_banner: typeof relations_pages_blocks_banner
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_carousel: typeof relations__pages_v_blocks_carousel
  relations__pages_v_blocks_three_item_grid: typeof relations__pages_v_blocks_three_item_grid
  relations__pages_v_blocks_banner: typeof relations__pages_v_blocks_banner
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_categories: typeof relations_categories
  relations_media: typeof relations_media
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_addresses: typeof relations_addresses
  relations_variants_rels: typeof relations_variants_rels
  relations_variants: typeof relations_variants
  relations__variants_v_rels: typeof relations__variants_v_rels
  relations__variants_v: typeof relations__variants_v
  relations_variant_types: typeof relations_variant_types
  relations_variant_options: typeof relations_variant_options
  relations_products_gallery: typeof relations_products_gallery
  relations_products_blocks_cta_links: typeof relations_products_blocks_cta_links
  relations_products_blocks_cta: typeof relations_products_blocks_cta
  relations_products_blocks_content_columns: typeof relations_products_blocks_content_columns
  relations_products_blocks_content: typeof relations_products_blocks_content
  relations_products_blocks_media_block: typeof relations_products_blocks_media_block
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations__products_v_version_gallery: typeof relations__products_v_version_gallery
  relations__products_v_blocks_cta_links: typeof relations__products_v_blocks_cta_links
  relations__products_v_blocks_cta: typeof relations__products_v_blocks_cta
  relations__products_v_blocks_content_columns: typeof relations__products_v_blocks_content_columns
  relations__products_v_blocks_content: typeof relations__products_v_blocks_content
  relations__products_v_blocks_media_block: typeof relations__products_v_blocks_media_block
  relations__products_v_rels: typeof relations__products_v_rels
  relations__products_v: typeof relations__products_v
  relations_carts_items: typeof relations_carts_items
  relations_carts: typeof relations_carts
  relations_orders_items: typeof relations_orders_items
  relations_orders_rels: typeof relations_orders_rels
  relations_orders: typeof relations_orders
  relations_transactions_items: typeof relations_transactions_items
  relations_transactions: typeof relations_transactions
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-sqlite' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
